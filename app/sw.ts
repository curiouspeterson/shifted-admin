/**
 * Service Worker
 * Last Updated: 2024-03-20
 * 
 * This service worker provides offline support, background sync,
 * and caching strategies using Workbox.
 */

/// <reference lib="webworker" />

import { precacheAndRoute } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate, NetworkFirst, CacheFirst } from 'workbox-strategies'
import { BackgroundSyncPlugin } from 'workbox-background-sync'
import { ExpirationPlugin } from 'workbox-expiration'
import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import { ExtendableEvent, ExtendableMessageEvent, PeriodicSyncEvent } from './lib/sw/types'

declare const self: ServiceWorkerGlobalScope & {
  __WB_MANIFEST: Array<{
    url: string
    revision: string | null
  }>
  __WB_DISABLE_DEV_LOGS: boolean
}

// Enable debug logging in development
if (process.env.NODE_ENV === 'development') {
  self.__WB_DISABLE_DEV_LOGS = false
}

// Precache assets generated by build
precacheAndRoute(self.__WB_MANIFEST)

// Background sync queue for API requests
const bgSyncPlugin = new BackgroundSyncPlugin('apiQueue', {
  maxRetentionTime: 24 * 60, // Retry for up to 24 hours
  onSync: async ({ queue }) => {
    try {
      await queue.replayRequests()
      // Broadcast successful sync
      const broadcast = new BroadcastChannel('sync-updates')
      broadcast.postMessage({ type: 'SYNC_COMPLETE' })
    } catch (error) {
      // Broadcast sync error
      const broadcast = new BroadcastChannel('sync-updates')
      broadcast.postMessage({ 
        type: 'SYNC_ERROR',
        error: error instanceof Error ? error.message : 'Sync failed'
      })
    }
  }
})

// API routes with background sync
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      bgSyncPlugin,
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 5 * 60 // Cache for 5 minutes
      })
    ]
  })
)

// Static assets with cache-first strategy
registerRoute(
  ({ request }) => request.destination === 'image' ||
                   request.destination === 'style' ||
                   request.destination === 'script' ||
                   request.destination === 'font',
  new CacheFirst({
    cacheName: 'static-assets',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60 // 30 days
      })
    ]
  })
)

// HTML pages with stale-while-revalidate
registerRoute(
  ({ request }) => request.destination === 'document',
  new StaleWhileRevalidate({
    cacheName: 'pages-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      })
    ]
  })
)

// Handle periodic sync
self.addEventListener('periodicsync', (event: PeriodicSyncEvent) => {
  if (event.tag === 'sync-data') {
    event.waitUntil(syncData())
  }
})

async function syncData() {
  const broadcast = new BroadcastChannel('sync-updates')
  try {
    const cache = await caches.open('api-cache')
    const requests = await cache.keys()
    
    for (const request of requests) {
      try {
        const response = await fetch(request)
        if (response.ok) {
          await cache.put(request, response.clone())
        }
      } catch (error) {
        broadcast.postMessage({
          type: 'SYNC_ERROR',
          error: error instanceof Error ? error.message : 'Sync failed',
          request: request.url
        })
      }
    }
    
    broadcast.postMessage({ type: 'SYNC_COMPLETE' })
  } catch (error) {
    broadcast.postMessage({
      type: 'SYNC_ERROR',
      error: error instanceof Error ? error.message : 'Sync failed'
    })
  }
}

// Listen for sync messages from clients
self.addEventListener('message', (event: ExtendableMessageEvent) => {
  if (event.data.type === 'SYNC_NOW') {
    event.waitUntil(syncData())
  }
}) 